# FLUENDO S.A.
# Copyright (C) <2024>  <support@fluendo.com>
# Platform config file for the Web platform.
# It contains sensitive enviroment configuration that
# shouldn't be modified unless you know what you are doing.
# PLEASE, DO NOT EDIT THIS FILE

import os
import os.path
from cerbero.config import Distro, FatalError
from cerbero.utils import EnvValueCmd

if target_distro != Distro.EMSCRIPTEN:
    raise FatalError('EMSCRIPTEN is the only Distro supported for the WEB platform')

# These variants are enabled by default, but not available on our platform
variants.rust = False

# Init build envvars in the way it is done in linux, darwin, etc.
# And do += later
for f in ['CPPFLAGS', 'CFLAGS', 'CCASFLAGS', 'CXXFLAGS', 'LDFLAGS',
          'OBJCFLAGS']:
    env[f] = env.get(f, '')

COMMON_FLAGS=" -O3 -pthread"

# https://github.com/WebAssembly/exception-handling
COMMON_FLAGS += " -fexceptions"

env['CFLAGS'] += COMMON_FLAGS
env['CFLAGS'] += " -mnontrapping-fptoint"

# SIMD, https://github.com/WebAssembly/simd
env['CFLAGS'] += " -msimd128 -DWASM_SIMD_COMPAT_SLOW"

# BIGINT, https://github.com/WebAssembly/JS-BigInt-integration
env['CFLAGS'] += " -DWASM_BIGINT"
env['LDFLAGS'] += " -sWASM_BIGINT"

# PIC
env['CFLAGS'] += " -fPIC"
env['CFLAGS'] += " -I" + os.path.join(prefix, "include")

env['CXXFLAGS'] += env['CFLAGS']

env['LDFLAGS'] += COMMON_FLAGS
env['LDFLAGS'] += " -sAUTO_JS_LIBRARIES=0 -sAUTO_NATIVE_LIBRARIES=0"

if not toolchain_prefix:
    toolchain_prefix = os.path.join(home_dir, "emsdk")

dot_emscripten_config = os.path.join(toolchain_prefix, '.emscripten')
# This file might be missing if we are bootstrapping
if os.path.exists(dot_emscripten_config):
    # Parse the .emscripten config file to fetch the installed
    # sdk enviroment.
    # after execution, this config file defines:
    # BINARYEN_ROOT, EMSCRIPTEN_ROOT, LLVM_ROOT, NODE_JS
    os.environ['EM_CONFIG'] = dot_emscripten_config
    exec(open(dot_emscripten_config).read(), globals())

    def add_cmd(var, prefix, command):
        env[var] = os.path.join(prefix, command)

    add_cmd('CC', EMSCRIPTEN_ROOT, 'emcc')
    add_cmd('CXX', EMSCRIPTEN_ROOT, 'em++')
    add_cmd('AR', EMSCRIPTEN_ROOT, 'emar')
    add_cmd('LD', EMSCRIPTEN_ROOT, 'emcc')
    add_cmd('NM', LLVM_ROOT, 'llvm-nm')
    add_cmd('LDSHARED', EMSCRIPTEN_ROOT, 'emcc'),
    add_cmd('RANLIB', EMSCRIPTEN_ROOT, 'emranlib')
